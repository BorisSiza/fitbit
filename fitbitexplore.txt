import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import os
import datetime

%matplotlib inline

def read_files_from_path(path): #function to read files and add date components
    list_ = []
    my_dir = os.listdir(path)
    csvs = [d for d in my_dir if d[-4:] == ".csv"]
    for c in csvs:
        df = pd.read_csv(path+c,index_col=None, header=0)
        df['date'] = c[-12:-4]
        year, month, day = int(c[-12:-8]),int(c[-8:-6]),int(c[-6:-4])
        df['year'] = year
        df['month'] = month
        df['day'] = day
        df['DOW'] = datetime.date(year, month, day).strftime("%A")
        df['DOW'] = pd.Categorical(df['DOW'],
                    categories=['Monday','Tuesday','Wednesday','Thursday','Friday','Saturday', 'Sunday'], ordered=True)
        list_.append(df)
    frame = pd.concat(list_)
    return frame

frame = read_files_from_path('/Users/shsu/Desktop/HealthData/Heart/')
frame['HourMinute'] = frame['Time'].str.slice(start=0, stop=5)
frame['Hour'] = frame['Time'].str.slice(start=0, stop=2)

def summary_stat(df, col_name): #function to provide med, min, max
    df = pd.DataFrame({'Mean ' : str(round(np.mean(df[col_name]),2)),
         'Median' : str(np.median(df[col_name])),
         'Min' : str(np.min(df[col_name])),
         'Max' : str(np.max(df[col_name]))}, index=[0])
    return df

#initial graph
HR = frame['Heart Rate']
plt.figure(figsize=(12, 9)) 
plt.hist(HR, range=(np.min(HR),np.max(HR)),
         linewidth=2,color="#3F5D7D", bins=100,edgecolor='black')

ax = plt.subplot(111)  
ax.spines["top"].set_visible(False)  
ax.spines["right"].set_visible(False)  

ax.get_xaxis().tick_bottom()  
ax.get_yaxis().tick_left()
plt.xticks(fontsize=14)  
plt.yticks(fontsize=14)  

plt.title('Heart Rate Histogram', fontsize=16)
plt.xlabel('Heart Rate', fontsize=16)
plt.ylabel('Counts')

plt.text(50,-3000, "Data source: www.fitbit.com | "  
         "Author: Randy Olson (randalolson.com / @randal_olson)", 
         fontsize=10)  

#plots of time and day of week
fig = plt.figure(figsize = (12,7))

ax = plt.subplot(121)  
Hourlydf = frame.groupby(by='Hour').mean()
meanHeart = Hourlydf['Heart Rate']

plt.plot(meanHeart, linestyle='-', marker='o', markersize=10)

ax.spines["top"].set_visible(False)  
ax.spines["right"].set_visible(False)  

ax.get_xaxis().tick_bottom()  
ax.get_yaxis().tick_left()
ax.set_ylim([np.min(meanHeart)-10, np.max(meanHeart)+10])
plt.xticks(fontsize=10)  
plt.yticks(fontsize=14)  

plt.title('Heart Rate vs. Hour of the Day', fontsize=15)
plt.xlabel(meanHeart.index.name)
plt.xlabel('Hour of the Day', fontsize=14)
plt.ylabel('Heart Rate', fontsize=14)

#############

ax2 = fig.add_subplot(122)
DOWdf = frame.groupby(by='DOW').mean()
meanDOW = DOWdf['Heart Rate']
meanDOW.plot(linestyle='-', marker='o', markersize=10)
  
ax2.spines["top"].set_visible(False)  
ax2.spines["right"].set_visible(False)  

ax2.get_xaxis().tick_bottom()  
ax2.get_yaxis().tick_left()
ax2.set_ylim([np.min(meanHeart)-10, np.max(meanHeart)+10])

plt.xticks(fontsize=10)  
plt.yticks(fontsize=14)  

plt.title('Heart Rate vs. Day of the Week', fontsize=15)
plt.xlabel(meanDOW.index.name, fontsize=14)
plt.xlabel('Day of the Week')
plt.ylabel('Heart Rate', fontsize=14)


#Day n nite
frame['Hour'] = frame['Hour'].astype(int)
Nine_to_fivedf = frame[(frame['Hour'] >= 8) & (frame['Hour'] <= 17) & (frame['DOW'] != 'Saturday') & (frame['DOW'] != 'Sunday')] 
Free_timedf = frame[~((frame['Hour'] >= 8) & (frame['Hour'] <= 17) & (frame['DOW'] != 'Saturday') & (frame['DOW'] != 'Sunday'))] 


print('HR when Awake: '+str(round(Nine_to_fivedf['Heart Rate'].mean(),2)))
print('HR when Awake: '+str(round(Free_timedf['Heart Rate'].mean(),2)))

Free_time_wokedf = Free_timedf[(Free_timedf['Hour']>=17)|(Free_timedf['Hour']<=1)]
Free_time_sleepdf = Free_timedf[~(Free_timedf['Hour']>=17)|(Free_timedf['Hour']<=1)]
print('HR when Free & Awake: '+str(round(Free_time_wokedf['Heart Rate'].mean(),2)))
print('HR when Free & Asleep: '+str(round(Free_time_sleepdf['Heart Rate'].mean(),2)))



#box and whisker
fig = plt.figure(figsize = (10,7))
Free_time_wokedf.boxplot(column = 'Heart Rate', by = 'DOW', positions = [5, 1, 6, 7, 4, 2, 3])

ax = plt.subplot(111)  
ax.spines["top"].set_visible(False)  
ax.spines["right"].set_visible(False) 
ax.set_ylim([0, 180])
plt.xticks(fontsize=10)  
plt.yticks(fontsize=14) 

plt.title('')
plt.suptitle('Day of the Week Heart Rate Boxplot')
plt.ylabel('Heart Rate')
plt.xlabel('Day of the Week')



#relevance to real world
Testdf = frame[(frame['date']=='20171208') | (frame['date']=='20171211') | (frame['date']=='20171212')]
Testingpeakdf = frame[((frame['date']=='20171208') & (frame['Hour']<=16) & (frame['Hour'] >=14)) | \
                    ((frame['date']=='20171211') & (frame['Hour']<=12) & (frame['Hour'] >=10)) | \
                    ((frame['date']=='20171212') & (frame['Hour']<=13) & (frame['Hour'] >=10))]
nonTestingpeakdf = frame[~((frame['date']=='20171208') & (frame['Hour']<=16) & (frame['Hour'] >=14)) | \
                    ((frame['date']=='20171211') & (frame['Hour']<=12) & (frame['Hour'] >=10)) | \
                    ((frame['date']=='20171212') & (frame['Hour']<=13) & (frame['Hour'] >=10))]

print(summary_stat(Testdf, "Heart Rate"))
print(summary_stat(Testingpeakdf, "Heart Rate"))
print(summary_stat(nonTestingpeakdf, "Heart Rate"))


#work
Workdf = frame[((frame['DOW']=='Monday') | (frame['DOW']=='Wednesday')) & \
                (frame['date'].astype(int) < 20171204) & (frame['Hour'].astype(int) < 17) & \
              (frame['Hour'].astype(int) > 8)] #Tuesdays and Thursdays between 9 and 5
Afterworkdf = frame[((frame['DOW']=='Monday') | (frame['DOW']=='Wednesday')) & \
                (frame['date'].astype(int) < 20171204) & (frame['Hour'].astype(int) > 17)]

print(summary_stat(WorkTuTrdf, 'Heart Rate'))
print(summary_stat(Afterworkdf, 'Heart Rate'))



NotWorkdf = frame[((frame['DOW']=='Monday') | (frame['DOW']=='Wednesday')) & \
                (frame['date'].astype(int) > 20171204) & (frame['Hour'].astype(int) < 17) & \
              (frame['Hour'].astype(int) > 8)] #Tuesdays and Thursdays between 9 and 5
AfterNotWorkdf = frame[((frame['DOW']=='Monday') | (frame['DOW']=='Wednesday')) & \
                (frame['date'].astype(int) > 20171204) & (frame['Hour'].astype(int) > 17)]

print(summary_stat(NotWorkTuTrdf, 'Heart Rate'))
print(summary_stat(NotNonworkTuTrdf, 'Heart Rate'))



#sleep data

frame2 = pd.read_csv('/Users/shsu/Desktop/HealthData/sleepsummary.csv')
frame2.head()


frame3 = pd.DataFrame(frame2.Date.str.split('/').tolist(),
                                   columns = ['Month','Day','Year'])
dow = []
dt = []
for index, row in frame3.iterrows():
    dow.append(datetime.date(int(str(20)+str(row.Year)), 
                        int(row.Month), int(row.Day)).strftime("%A"))
    dt.append(datetime.date(int(str(20)+str(row.Year)), 
                        int(row.Month), int(row.Day)))
frame2['Dow'] = dow
frame2['dt'] = dt
frame2.head()


#sleep summary graph
fig, ax = plt.subplots(nrows=2, ncols=2, sharex=True, figsize=(12,7))
plt.suptitle('Sleep Summary', fontsize=20)

plt.subplot(2, 2, 1)
plt.plot(frame2['dt'],frame2['Minutes Asleep'], linestyle='-', marker='o', markersize=10, color='red')
plt.tick_params(labelbottom='off')
plt.ylabel('Minutes Asleep', fontsize=12) 

plt.subplot(2, 2, 2)
plt.plot(frame2['dt'],frame2['Minutes Awake'], linestyle='-', marker='o', markersize=10, color='orange')
plt.tick_params(labelbottom='off')
plt.ylabel('Minutes Awake', fontsize=12)

plt.subplot(2, 2, 3)
plt.plot(frame2['dt'],frame2['Restless Duration'], linestyle='-', marker='o', markersize=10, color='blue')
plt.xticks(rotation=45)
plt.ylabel('Minutes Restless', fontsize=12)

plt.subplot(2, 2, 4)
plt.bar(frame2['dt'],frame2['Efficiency'], color='green')
plt.xticks(rotation=45)
plt.ylabel('Efficiency (Percentage)', fontsize=12)

plt.show()

fig = plt.figure(figsize = (12,5))
plt.plot(frame2['dt'],frame2['Restless Duration'], linestyle='-', 
         markersize=10, color='blue', label='Restless', linewidth=3.0)
plt.plot(frame2['dt'],frame2['Minutes Awake'], linestyle='-', 
         markersize=10, color='orange', label='Awake', linewidth=3.0, alpha=0.9)
plt.plot(frame2['dt'],frame2['Minutes Asleep'], linestyle='-', 
         markersize=10, color='red', label='Asleep', linewidth=3.0)

ax = plt.subplot(111)  
ax.spines["top"].set_visible(False)  
ax.spines["right"].set_visible(False)  
ax.get_xaxis().tick_bottom()  
ax.get_yaxis().tick_left()

plt.xlabel('Date', fontsize=14)
plt.ylabel('Minutes', fontsize=14)
plt.title('Aspects of Sleep Over Oct to Dec (2017)', fontsize=16)
plt.legend()
plt.xticks(rotation=45)


corrdf = frame2[['Efficiency','Minutes Asleep', 'Minutes Awake', 
        'Restless Count', 'Restless Duration', 'Time in Bed', 'Dow']]
corrdf.corr()


def createheatmap(df, anchor_val):
    sns.set(style = "white")
    corrd = df.corr()
    mask = np.zeros_like(corrd, dtype=np.bool)
    mask[np.triu_indices_from(mask)] = True
    f, ax = plt.subplots(figsize=(11, 9))
    cmap = sns.diverging_palette(220, 10, as_cmap=True)
    sns.heatmap(corrd, mask=mask, cmap=cmap, vmax=anchor_val,
            square=True, xticklabels=True, yticklabels=True,
            linewidths=.5, cbar_kws={"shrink": .5}, ax=ax)